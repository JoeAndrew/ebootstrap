#!/bin/bash
# Copyright (c) 2015 Bruce Schultz <brulzki@gmail.com>
# Distributed under the terms of the GNU General Public License v2

# Author: Bruce Schultz <brulzki@gmail.com>

# Usage:
# ebootstrap CONFIG TARGET

EBOOTSTRAP_LIB=$(readlink -m ${0%/*})/lib

source ${EBOOTSTRAP_LIB}/ebootstrap-core.sh

usage() {
    cat <<EOF
Usage: ${0##*/} [action] [options] CONFIG [TARGET]

Actions: [ --info | --fetch | --unpack | --install | --config | --clean ]
EOF

[[ $1 == "--long" ]] && cat <<EOF
  --info
          Show the output from pkg_info()

  --fetch
          Fetch the source package

  --unpack
          Unpack the source packge into the TARGET directory

  --install (the default)
          Install the system defined in CONFIG to the TARGET directory

  --config
          Configure the system installed at TARGET
          This is the action defined in the pkg_config() section of the ebuild

  --clean
          Clean the ebuild temporary files

Options:
  --bare
          Do an install from a binary package repository without unpacking
          a stage3 file first. (This is experimental)

  --force
          Try harder to do something that would otherwise fail
EOF
}

load-global-config

# command line parsing
SHORT_OPTS=""
LONG_OPTS="info,fetch,unpack,install,config,clean,force,bare,arch:,help"

# from http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash/29754866#29754866
getopt --test; [[ $? == 4 ]] || { echo "ERROR: Invalid version of getopt"; exit 2; }
OPTS=$(getopt --options "${SHORT_OPTS}" --longoptions "${LONG_OPTS}" --name "${0##*/}" -- "$@")
[[ $? == 0 ]] || { echo "ERROR: bad command line"; exit 1; }
eval set -- "${OPTS}"

while true; do
    case "${1}" in
        --info|--fetch|--unpack|--install|--config|--clean)
            action="${1##*-}"
            ;;
        --force)
            EBOOTSTRAP_FORCE=1
            ;;
        --bare)
            EBOOTSTRAP_BARE=1
            ;;
        --arch)
            ARCH="${2}"
            shift
            ;;
        --help)
            usage --long
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "ERROR: Unhandled option: $1"
            exit 3
            ;;
    esac
    shift
done
unset OPTS

__args=2
if [[ ${action} =~ ^(info|fetch)$ ]]; then
    __args=1
fi
if [[ $# < ${__args} ]]; then
    usage
    exit -1
fi

# ensure that ARCH is valid
# load it from the system if its not been explicitly defined
# (this must be set before initialising the ebuild backend or its masked
# by the PORTAGE_CONFIGROOT setting)
: ${ARCH:="$(portageq envvar ARCH)"}
if ! has "${ARCH}" amd64 x86; then
    die "ERROR: invalid ARCH: ${ARCH}"
fi
export ARCH

# load the backend
if [[ -n "${EBOOTSTRAP_BACKEND}" ]]; then
    if [[ -f "${EBOOTSTRAP_LIB}/ebootstrap-backend-${EBOOTSTRAP_BACKEND}.sh" ]]; then
        source ${EBOOTSTRAP_LIB}/ebootstrap-backend-${EBOOTSTRAP_BACKEND}.sh
    else
        die "Failed to find backend for ${EBOOTSTRAP_BACKEND}"
    fi
else
    source ${EBOOTSTRAP_LIB}/ebootstrap-backend-default.sh
fi

# locate the target configuration file
config=$(find-config-file ${1})
[[ $? == 0 ]] || die "${0##*/}: there are no configs to satisfy \"${1}\""

# only set EROOT if needed or a argument was passed in
if [[ __args == 2 || -n ${2} ]]; then
    EROOT=$(readlink -m ${2}) || die "readlink target failed"
fi
unset __args

action=${action:-install}

case ${action} in
    info|fetch|unpack|prepare|clean)
        ;;
    install)
        einfo "Installing into ${EROOT}"
        ;;
    configure|config)
        einfo "Configuring: ${EROOT}"
        ;;
    compile|test)
        ewarn "Running ebuild phase ${action}"
        ;;
    *)
        ewarn "Trying unknown ebuild command: ${action}"
        ;;
esac

ebootstrap-backend ${action} "${config}" || eerror "Backend failure: ${action} ${config}"

# clean up the temporary build directory after successful install
if [[ $? -eq 0 && "${action}" == "install" ]]; then
    einfo "Cleaning"
    ebootstrap-backend clean $config
fi
