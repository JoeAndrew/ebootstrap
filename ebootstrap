#!/bin/bash
# Copyright (c) 2015 Bruce Schultz <brulzki@gmail.com>
# Distributed under the terms of the GNU General Public License v2

# Author: Bruce Schultz <brulzki@gmail.com>

# Usage:
# ebootstrap CONFIG TARGET

source /lib/rc/sh/functions.sh

__cfgr=$(readlink -m ${0%/*})

export EBOOTSTRAP_LIB=${__cfgr}/lib

# override the portage settings
export PORTAGE_CONFIGROOT=${__cfgr}
export PORTDIR=${__cfgr}/tree
export PORTAGE_REPOSITORIES="[ebootstrap]
location = ${PORTDIR}
sync-type =
sync-uri =
"

if [[ ${UID} == 0 ]]; then
	: ${PORTAGE_TMPDIR:=/var/tmp/ebootstrap}
else
	# this enables running portage as non-root, but it spits out
	# lots of chgrp: operation not permitted errors which I can't
	# get rid of :(
	: ${PORTAGE_TMPDIR:=/var/tmp/ebootstrap-${UID}}
fi
export PORTAGE_TMPDIR

usage() {
	n=${0##*/}
	cat <<EOF
Usage: ${n} [action] CONFIG TARGET

Actions: [ --info | --install | --clean | --config ]
EOF

[[ $1 == "--long" ]] && cat <<EOF
  --install (the default)
	  Install the system defined in CONFIG to the TARGET directory

  --info
	  Show the output from pkg_info()

  --clean
	  Clean the ebuild temporary files

  --config
	  Configure the system installed at TARGET
	  This is the action defined in the pkg_config() section fo the ebuild

PORTAGE_CONFIGROOT=${PORTAGE_CONFIGROOT}
EOF
}

die() {
	[ ${#} -eq 0 ] || eerror "${*}"
	exit 2
}

if [[ "${EBOOTSTRAP_BACKEND}" == "ebuild" ]]; then

	ebootstrap-ebuild () {
		ebuild "${@}"
	}

else
	source ${EBOOTSTRAP_LIB}/ebootstrap.sh

	inherit() {
		:
	}

	debug-print-function() {
		# adapted from portage ebuild.sh
		echo "${1}: entering function, parameters ${*:2}"
	}

	ebootstrap-ebuild () {
		local ebuild=$1 phase=$2

		# this is probably dangerous
		source ${PORTAGE_CONFIGROOT}/etc/portage/make.conf
		source ${ebuild}
		export A=${SRC_URI##*/}
		export EROOT=${ROOT}
		case $phase in
			info)
				echo "Info"
				;;
			install)
				echo "Unpacking ${DISTDIR}/${A}"
				ebootstrap-unpack ${DISTDIR}/${A}
				;& # fall through to configure
			config)
				echo "Configuring"
				ebootstrap-configure
				;;
			fetch)
				echo "Fetching"
				;;
			clean)
				echo "Cleaning"
				;;

		esac
	}
fi

case ${1} in
	--info|--fetch|--install|--config|--clean)
		phase=${1##*-}
		shift
		;;
	--help)
		usage --long
		exit 0
		;;
	--*)
		phase=${1##*-}
		ewarn Trying phase $phase
		shift
		;;
esac


if [[ $# -lt 2 ]]; then
	usage
	exit -1
fi

if [[ -f ${1} ]]; then
	ebuild=$(readlink -m ${1})
else
	# equery means gentoolkit must be installed
	ebuild=$(equery which ${1} 2>/dev/null)
fi
[[ $? == 0 ]] || die "${0##*/}: there are no ebuilds to satisfy \"${1}\""

TARGET=$(readlink -m ${2}) || die "readlink target failed"

phase=${phase:-install}

case $phase in
	info)
		;;
	clean)
		einfo "Cleaning"
		;;
	install)
		einfo "Installing into $TARGET"
		;;
	config)
		einfo "Configuring: $TARGET"
		;;
	fetch|unpack|prepare|configure|compile|test)
		ewarn "Running ebuild phase $phase"
		;;
	*)
		ewarn "Trying unknown ebuild phase: $phase"
		;;
esac

export TARGET
# set the ROOT so we can use EROOT in place of TARGET in the ebuilds
# but this currently prints a warning about not finding the system profile
# even though we override the profile in PORTAGE_CONFIGROOT ???
export ROOT=${TARGET}

mkdir -p ${PORTAGE_TMPDIR} || die "Failed to create PORTAGE_TMPDIR"
ebootstrap-ebuild $ebuild $phase
if [[ $? -eq 0 && "${phase}" == "install" ]]; then
	einfo "Cleaning"
	ebootstrap-ebuild $ebuild clean
fi
