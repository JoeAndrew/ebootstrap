#!/bin/bash
# Copyright (c) 2015 Bruce Schultz <brulzki@gmail.com>
# Distributed under the terms of the GNU General Public License v2

# Author: Bruce Schultz <brulzki@gmail.com>

# Usage:
# ebootstrap CONFIG TARGET

EBOOTSTRAP_LIB=$(readlink -m ${0%/*})/lib

source ${EBOOTSTRAP_LIB}/ebootstrap-core.sh

usage() {
    n=${0##*/}
    cat <<EOF
Usage: ${n} [action] CONFIG TARGET

Actions: [ --info | --fetch | --unpack | --install | --config | --clean ]
EOF

[[ $1 == "--long" ]] && cat <<EOF
  --info
          Show the output from pkg_info()

  --fetch
          Fetch the source package

  --unpack
          Unpack the source packge into the TARGET directory

  --install (the default)
          Install the system defined in CONFIG to the TARGET directory

  --config
          Configure the system installed at TARGET
          This is the action defined in the pkg_config() section fo the ebuild

  --clean
          Clean the ebuild temporary files
EOF
}

load-global-config

while [[ "${1}" =~ ^-- ]]; do
    case ${1} in
        --info|--fetch|--unpack|--install|--config|--clean)
            action=${1##*-}
            ;;
        --force)
            EBOOTSTRAP_FORCE=1
            ;;
        --help)
            usage --long
            exit 0
            ;;
        --*)
            action=${1##*-}
            ewarn "Trying unknown command ${action}"
            ;;
    esac
    shift
done

if [[ $# -lt 2 ]]; then
    usage
    exit -1
fi

# load the backend
if [[ -n "${EBOOTSTRAP_BACKEND}" ]]; then
    if [[ -f "${EBOOTSTRAP_LIB}/ebootstrap-backend-${EBOOTSTRAP_BACKEND}.sh" ]]; then
        source ${EBOOTSTRAP_LIB}/ebootstrap-backend-${EBOOTSTRAP_BACKEND}.sh
    else
        die "Failed to find backend for ${EBOOTSTRAP_BACKEND}"
    fi
else
    source ${EBOOTSTRAP_LIB}/ebootstrap-backend-default.sh
fi

# locate the target configuration file
config=$(find-config-file ${1})
[[ $? == 0 ]] || die "${0##*/}: there are no configs to satisfy \"${1}\""

EROOT=$(readlink -m ${2}) || die "readlink target failed"

action=${action:-merge}

case ${action} in
    info|fetch|unpack|prepare|clean)
        ;;
    install|merge)
        einfo "Installing into ${EROOT}"
        ;;
    configure|config)
        einfo "Configuring: ${EROOT}"
        ;;
    compile|test)
        ewarn "Running ebuild phase ${action}"
        ;;
    *)
        ewarn "Trying unknown ebuild command: ${action}"
        ;;
esac

ebootstrap-backend ${action} "${config}" || eerror "Backend failure: ${action} ${config}"

# clean up the temporary build directory after successful install
if [[ $? -eq 0 && "${action}" == "install" ]]; then
    einfo "Cleaning"
    ebootstrap-backend clean $config
fi
